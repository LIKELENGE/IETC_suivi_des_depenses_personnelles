PV de la Réunion du 28 Mai 2025 – Projet “Création d’une application de suivi de dépenses personnelles 

Participants : 

1.Jean Pierre 
2. Harry 
3.Moïse 

Objectif : Se mettre d’accord d’une architecture fonctionnelle pour l’application" La Pécuniaire Magique” en respectant les contraintes pédagogiques de l’exercice et la répartition des taches pour la meilleure collaboration de l’équipe et que chacun de nous participe. 

D'abord, Nous avons très clairement exprimé notre accord pour l’architecture MVT (Model – View - 	Template), à la condition qu’elle soit approuvée par Monsieur Burniaux (le client). 

Nous étions donc par ailleurs d’accord de passer sur l’architecture TKinter si monsieur Burniaux désapprouvait l’architecture MVT. 

Ensuite, On a rediscuté sur l’architecture MVT sur laquelle on travaille pour le moment ; 

L'application adoptera une architecture MVT, utilisant le Framework Flask pour le développement web. Il est important de noter que l’utilisation d'une base de données relationnelle est exclue pour ce projet. 

Composants de l’Application : 

Modèles : 

Représentation des entités via des classes métier (Utilisateur, Catégorie_dépense, Transaction). 

Implémentation des méthodes CRUD et logique métier. 

Une classe générique de base pour centraliser des opérations communes telles que la lecture et l’écriture de fichiers JSON ,  afin de simplifier le code 

Utilisation de concepts POO : héritage, polymorphisme, surcharge, constructeurs. 

Routes / Vues : 

Gestion des requêtes HTTP (GET/POST). 

Contrôle de la logique métier et des sessions (connexion/déconnexion). 

Interaction avec les modèles et templates. 

Validateurs de formulaires : 

Utilisation de WTForms (ou équivalent). 

Validation des champs et respect des contraintes métier. 

Templates : 

Basés sur Jinja2 pour générer les pages HTML dynamiquement. 

Rôle central dans la saisie utilisateur et l’affichage des données. 

Répartition des Tâches : 

CRUD Utilisateur : Harry 

CRUD Catégorie : Jean Pierre 

CRUD Transaction : Moïse 

Validateurs de formulaires : Nourredine 

Contraintes du Projet : 

Pas de bases de données relationnelles ni ORM. 

Données stockées sous format JSON. 

Respect strict des principes de la POO et séparation des responsabilités. 

Qualités attendues du Code : 

Lisibilité, maintenabilité, concision. 

Usage limité de bibliothèques externes (uniquement si justifié par l’utilité). 

Organisation du Travail : 

Sprints de 2 jours. 

Collaboration encouragée (entraide en cas d'avance ou de retard). 

Réunions de suivi de 15 minutes après chaque sprint. 

Fonctionnalités bonus développées uniquement après complétion du socle requis. 

 
 

 
